---
import Footer from "@/components/footer.astro";
import NavBar from "@/components/nav-bar.astro";
// Supports weights 100-900
import "@fontsource-variable/montserrat";
import "@fontsource/poppins";
import { css } from "styled-system/css";
import "../index.css"

const BODY_CONTAINER = css({
  bg: "bg_color",
  color: "text_color",
  display: "flex",
  alignItems: "center",
  flexDir: "column"
})


---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <title>Habib Portfolio</title>
  </head>
  <body data-color-mode="light" class={BODY_CONTAINER}>
    <NavBar />
    <main class={css({
      maxWidth: "1500px",
      width: "100%"
    })}>
      <slot />
    </main>
    <Footer />
  </body>
  <script>

    function observerAnimation(entries: IntersectionObserverEntry[], observer: IntersectionObserver) {
      entries.forEach(entry => {
          const elementId = entry.target.id
          const info = animationElements.find(it => it.elementSelector.includes(elementId))

          if(!info){
            throw new Error(elementId + " not found.")
          }


          const elementSource = document.querySelector(info?.recipientElementSelector ?? info?.elementSelector!!)
          if(!elementSource){
            throw new Error(elementSource + " not found.")
          }
          elementSource.classList.toggle("unset", entry.isIntersecting)
      })
    }

    const animationElements: {
      elementSelector: string,
      recipientElementSelector?: string,
    }[] = [{
      elementSelector: "#welcome",
      recipientElementSelector: "#image-container",
    }]
    

    const observer = new IntersectionObserver(observerAnimation, {
      root: undefined,
      rootMargin: undefined,
      threshold: 0
    })

    animationElements.forEach(it => {
      const element = document.querySelector(it.elementSelector)
      if(!element){
        throw new Error(it.elementSelector + " not found.")
      }
      observer.observe(element)
    })

  </script>
</html>

<style is:global>
  body {
    font-family: "Montserrat Variable", sans-serif;
  }



  [data-animation="show"]  {
    opacity: 0;
    transition: all 1s ease-in-out 0.2s;

    --opacity: 1;
    --scale: 1;
  } 


  .unset {
    opacity: var(--opacity);
    transform: scale(var(--scale));
  }
</style>


